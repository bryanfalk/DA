import { createOptimizedPicture } from '../../scripts/aem.js';
import { domEl } from '../../scripts/dom-helpers.js';

/**
* Generates a the media content in the card.
* @param {HTMLElement} div - The `div` element to be transformed into a card media section.
* @param {HTMLElement} container - The card wrapper the content should be in.
*/
function generateMedia( div, container ) {
	div.className = 'usa-card__media';
	const media = container.querySelector( '.usa-card__media' );
	const img = container.querySelector( 'picture' ) || container.querySelector( 'svg' );
	const imgWrapper = domEl( 'div', { class: 'usa-card__img' } );
	const svgParagraph = media.querySelector( 'p' );
	imgWrapper.append( img );
	media.append( imgWrapper );

	// remove the old p tag that the svg was wrapped in if it exists
	if ( svgParagraph ) {
		svgParagraph.remove();
	}
}

/**
* Generates a the non-media content in the card.
* @param {HTMLElement} div - The `div` element to be transformed into a card media section.
* @param {HTMLElement} container - The card wrapper the content should be in.
*/
function generateContent( div, container, type ) {
	const button = div.querySelector( '.usa-button__wrap a' );
	const heading = div.querySelector( 'h2, h3, h4, h5, h6' );
	div.className = 'usa-card__body';

	// take out the button and put into its own container
	if ( button ) {
		const buttonWrap = domEl( 'div', { class: 'usa-card__footer' } );
		buttonWrap.append( button );
		if ( type === 'blue' ) {
			button.classList.add( 'usa-button--secondary' );
		}
		container.append( buttonWrap );
	}

	// take out the heading and put into its own container
	if ( heading ) {
		const header = domEl( 'div', { class: 'usa-card__header' } );
		heading.classList.add( 'usa-card__heading' );
		header.append( heading );
		container.prepend( header );
	}
}

/**
* Generates in the card.
* @param {HTMLElement} container - The card wrapper the content should be in. child of the li
*/
function generateWholeCard( container, type ) {
	[...container.children].forEach( ( div ) => {
		if ( div.querySelector( 'picture' ) || div.querySelector( 'svg' ) ) {
			generateMedia( div, container );
		} else {
			generateContent( div, container, type );
		}
	} );
}

/**
* Checks if we have an incompatible card in the grid.
* @param {HTMLElement} el - The li content we are checking
*/
function checkUnmatchingCard( el, type ) {
	if ( type === 'blue' && el.querySelector( 'picture' ) ) {
		return true;
	} else if ( type === 'default' && el.querySelector( 'svg' ) ) {
		return true;
	} else {
		return false;
	}
}

/**
* Generates all content in the card
* @param {HTMLElement} block - The card grid generated by EDS
*/
export default function decorate( block ) {
	const grid = 'grid-col-12 tablet:grid-col-6 desktop:grid-col-4 widescreen:grid-col-3';
	const type = block.classList.contains( 'blue' ) ? 'blue' : 'default';
	const ul = domEl( 'ul', { class: 'usa-card-group grid-row' } );

	[...block.children].forEach( ( row ) => {
		const li = domEl( 'li', { class: `usa-card ${grid}` } );
		const cardContainer = domEl( 'div', { class: 'usa-card__container' } );

		// add all the table row contents into a li with a container wrapper inside
		while ( row.firstElementChild ) {
			cardContainer.append( row.firstElementChild );
			li.append( cardContainer );
		}
		// if the card isn't the right type for the class remove it...
		if ( checkUnmatchingCard( li, type ) ) {
			if ( type === 'blue' && li.querySelector( 'picture' ) ) {
				li.querySelector( 'picture' ).parentNode.remove();
			} else {
				li.querySelector( '.icon' ).closest( 'p' ).parentNode.remove();
			}
			// ..else generate the card and add to the ul grid
		}
		generateWholeCard( cardContainer, type );
		ul.append( li );
	} );

	ul.querySelectorAll( 'picture > img' ).forEach( ( img ) => img.closest( 'picture' ).replaceWith( createOptimizedPicture( img.src, img.alt, false, [{ width: '605' }] ) ) );
	ul.querySelectorAll( 'picture > img' ).forEach( ( img ) => {
		img.setAttribute( 'height', '340' );
		img.setAttribute( 'width', '605' );
		img.setAttribute( 'loading', 'lazy' );
	} );

	block.textContent = '';
	block.append( ul );
}
